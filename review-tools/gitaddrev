#!/usr/bin/perl

use File::Basename;

my $rmrev = 0;
my @reviewers;
my @commits;
my $skip = 0;
my $my_email;
my $my_id;
my $matchstr;
my $clatype;
my $found = 0;
my $num = 0;
my $refuse = 0;
my $prnum = 0;
my $trivial = 0;

%list = (
	"matt" => 'Matt Caswell <matt@openssl.org>',
	"caswell" => 'Matt Caswell <matt@openssl.org>',
	"mark" => 'Mark J. Cox <mark@openssl.org>',
	"cox" => 'Mark J. Cox <mark@openssl.org>',
	"viktor" => 'Viktor Dukhovni <viktor@openssl.org>',
	"steve" => 'Stephen Henson <steve@openssl.org>',
	"henson" => 'Stephen Henson <steve@openssl.org>',
	"tim" => 'Tim Hudson <tjh@openssl.org>',
	"tjh" => 'Tim Hudson <tjh@openssl.org>',
	"lutz" => 'Lutz Jänicke <jaenicke@openssl.org>',
	"jaenicke" => 'Lutz Jänicke <jaenicke@openssl.org>',
	"emilia" => 'Emilia Käsper <emilia@openssl.org>',
	"ben" => 'Ben Laurie <ben@openssl.org>',
	"stevem" => 'Steve Marquess <marquess@openssl.org>',
	"marquess" => 'Steve Marquess <marquess@openssl.org>',
	"bodo" => 'Bodo Möller <bodo@openssl.org>',
	"andy" => 'Andy Polyakov <appro@openssl.org>',
	"appro" => 'Andy Polyakov <appro@openssl.org>',
	"kurt" => 'Kurt Roeckx <kurt@openssl.org>',
	"rich" => 'Rich Salz <rsalz@openssl.org>',
	"rsalz" => 'Rich Salz <rsalz@openssl.org>',
	"geoff" => 'Geoff Thorpe <geoff@openssl.org>',
	"richard" => 'Richard Levitte <levitte@openssl.org>',
	"levitte" => 'Richard Levitte <levitte@openssl.org>'
);

my $realname = $0;
while (my $tmpname = readlink($realname)) {
    $realname = $tmpname;
}
my $clafile = dirname($realname)."/../cladb.txt";

if (defined $ENV{CLADB}) {
    $clafile = $ENV{CLADB};
}

foreach (@ARGV) {
    if (/^--list$/) {
	map { printf "%-15s (%s)\n", $_, $list{$_} } sort keys %list;
	exit(0);
    } elsif (/^--reviewer=(.+)$/) {
        if (!exists $list{$1}) {
	        print STDERR "Unknown reviewer $1\n";
	        exit 1;
        }
        push @reviewers, $1;
    } elsif (/^--prnum=(.+)$/) {
        $prnum = $1;
    } elsif (/^--commit=(.+)$/) {
        push @commits, $1;
        $skip = 1;
    } elsif (/^--rmreviewers$/) {
        $rmrev = 1;
    } elsif (/^--myemail=((.+)\@.+)$/) {
        if (!exists $list{$2}) {
	        print STDERR "Unknown email: $1\n";
	        exit 1;
        }
        $my_email = $1;
        $my_id = $2;
    } elsif (/^--trivial$/) {
        $trivial = 1;
    }
}

if ($skip == 1) {
    my $commit_id = $ENV{GIT_COMMIT};
    foreach(@commits) {
        if ($commit_id =~ /^$_/) {
            $skip = 0;
            last;
        }
    }
    if ($skip == 1) {
        while(<STDIN>) {
            print;
        }
    exit(0);
    }
}

if (scalar @reviewers == 0 && $rmrev == 0) {
	print STDERR "No reviewer set!\n";
	exit 1;
}

# If author doesn't match us add a reviewer
if ($ENV{GIT_AUTHOR_EMAIL} ne $my_email) {
    push @reviewers, $my_id unless grep {$_ eq $my_id} @reviewers;
} else {
    # If we are in list delete it: we can't review our own commit
    @reviewers = grep { $_ ne $my_id } @reviewers;
}

my $last_line_blank = 0;
my $have_rev = 0;
line: while(<STDIN>) {
    if (/^Reviewed-by:\s*(\S.*\S)\s*$/) {
        next if $rmrev == 1;
        $have_rev = 1;
        # Skip if reviewer already in list
        my $rtmp;
        foreach $rtmp (@reviewers) {
            if ($1 eq $list{$rtmp}) {
                next line;
            }
        }
    }
    print;
    $last_line_blank = ($_ =~ /^\s*$/);
}
if ($rmrev == 0) {
    #Add a blank line unless the last one is already blank or a review line
    print "\n" unless $last_line_blank || $have_rev;
    foreach(@reviewers) {
	    print "Reviewed-by: $list{$_}\n";
    }
    if ($trivial) {
        print "CLA: trivial\n";
    }
}

print "(Merged from https://github.com/openssl/openssl/pull/$prnum)"
    if $prnum;

my $email = $ENV{GIT_AUTHOR_EMAIL};

if (!$trivial) {
    if (open(my $cladb, "<", $clafile)) {
        my $regex;
        while(<$cladb>) {
            /^(#.*|\s*)$/ and next;
            /^([^\s]+)\s+/ or die "\nSyntax error in cladb.txt";
            $regex = $1;
            $regex = lc($regex);
            # Any emails of the form ".@xyz.com" should not be used for matching
            next if $regex =~ /^\.\@/;
            # Any emails of the form "*@xyz.com" should use "*" as a wildcard
            $regex =~ s/\*/\.\*/g;
            my $testemail = lc($email);
            if ($regex =~ /^!(.*)/) {
                $regex = $1;
                $refuse++ if ($testemail =~ $regex);
            } elsif ($testemail =~ $regex) {
                $num++;
            }
        }
        close $cladb;

        if ($refuse != 0) {
        die "\nError: Author $email has explicity refused to provide a CLA";
        } elsif ($num == 0) {
        warn "\n\nWARNING: CLA for $email not found\n";
        } elsif ($num != 1) {
        die "\nError: Multiple matching CLAs for $email in cladb.txt";
        }
    } else {
        warn <<"_____";

WARNING: couldn't open $clafile
         You may want to set the environment variable CLADB
_____
    }
}
