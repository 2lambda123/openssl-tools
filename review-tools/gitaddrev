#!/usr/bin/perl

use File::Basename;
use FindBin;

use OpenSSL::Query::REST;
use Module::Load::Conditional qw(can_load);

can_load(modules => { OpenSSL::Query::DB => undef });

my $rmrev = 0;
my @reviewers;
my @nocla_reviewers;
my @unknown_reviewers;
my $skip_reviewer;
my $omccount = 0;
my @commits;
my $skip = 0;
my $matchstr;
my $clatype;
my $found = 0;
my $num = 0;
my $refuse = 0;
my $prnum = 0;
my $trivial = 0;

my $query = OpenSSL::Query->new();

foreach (@ARGV) {
    if (/^--list$/) {
	my %list = ();
	foreach ($query->list_people()) {
	    my $email_id = (grep { ref($_) eq "" && $_ =~ m|\@| } @$_)[0];
	    my $rev = $query->find_person_tag($email_id, 'rev');
	    my $omc = $query->is_member_of($email_id, 'omc');
	    next unless $query->has_cla($rev);
	    my @ids = sort grep { $_ =~ m|^[a-z]+$| } map {
		if (ref($_) eq "HASH") {
		    values %$_;
		} else {
		    $_;
		}
	    } @$_;
	    foreach (@ids) {
		$list{$_} = { tag => $rev, omc => $omc };
	    }
	}
	foreach (sort { my $res = $list{$a}->{tag} cmp $list{$b}->{tag};
			$res != 0 ? $res : ($a cmp $b) } keys %list) {
	    printf "%-15s %-6s (%s)\n",
		$_, $list{$_}->{omc} ? "[OMC]" : "", $list{$_}->{tag};
	}
	exit 0;
    } elsif (/^--reviewer=(.+)$/) {
	my $rev = $query->find_person_tag($1, 'rev');
	if ($rev) {
	    my $cla = $query->has_cla($rev);
	    if ($cla) {
		unless (grep {$_ eq $rev} @reviewers) {
		    $omccount++ if $query->is_member_of($1, 'omc');
		    push @reviewers, $rev;
		}
	    } else {
		push @nocla_reviewers, $1
		    unless grep {$_ eq $1} @nocla_reviewers;
	    }
	} else {
	    push @unknown_reviewers, $1
		unless grep {$_ eq $1} @unknown_reviewers;
	}
    } elsif (/^--prnum=(.+)$/) {
        $prnum = $1;
    } elsif (/^--commit=(.+)$/) {
        push @commits, $1;
        $skip = 1;
    } elsif (/^--rmreviewers$/) {
        $rmrev = 1;
    } elsif (/^--myemail=(.+\@.+)$/) {
	my $rev = $query->find_person_tag($1, 'rev');
	if ($rev) {
	    my $cla = $query->has_cla($rev);
	    if ($cla) {
		unless (grep {$_ eq $rev} @reviewers) {
		    $omccount++ if $query->is_member_of($1, 'omc');
		    push @reviewers, $rev;
		}

		# We can't add Reviewed-by: lines with our own name on commits
		# we have authored ourselves.  However, we need to exist as an
		# entry in @reviewers so the count check below won't show false
		# positives, so instead, we set up this reviewer identity for
		# removal before rewriting the commit message.
		if ($ENV{GIT_AUTHOR_EMAIL} eq $1) {
		    $skip_reviewer = $rev;
		}
	    } else {
		push @nocla_reviewers, $1
		    unless grep {$_ eq $1} @nocla_reviewers;
	    }
	} else {
	    push @unknown_reviewers, $1
		unless grep {$_ eq $1} @unknown_reviewers;
	}
    } elsif (/^--trivial$/) {
        $trivial = 1;
    }
}
if (@unknown_reviewers) {
    die "Unknown reviewers: ", join(", ", @unknown_reviewers), "\n";
}
if (@nocla_reviewers) {
    die "Reviewers without CLA: ", join(", ", @nocla_reviewers), "\n";
}
if (scalar @reviewers < 2) {
    die "Too few reviewers (total must be at least 2)\n";
}
if ($omccount < 1) {
    die "At least one of the reviewers must be an OMC member\n";
}
if ($skip_reviewer) {
    @reviewers = grep { $_ ne $skip_reviewer } @reviewers;
    @nocla_reviewers = grep { $_ ne $skip_reviewer } @nocla_reviewers;
    @unknown_reviewers = grep { $_ ne $skip_reviewer } @unknown_reviewers;
}
print STDERR "DEBUG: \@reviewers = ( ", join(", ", @reviewers), " )\n";

if ($skip == 1) {
    my $commit_id = $ENV{GIT_COMMIT};
    foreach(@commits) {
        if ($commit_id =~ /^$_/) {
            $skip = 0;
            last;
        }
    }
    if ($skip == 1) {
        while(<STDIN>) {
            print;
        }
    exit(0);
    }
}

if (scalar @reviewers == 0 && $rmrev == 0) {
    die "No reviewer set!\n";
}

my $last_line_blank = 0;
my $have_rev = 0;
while(<STDIN>) {
    if (/^\(Merged from https:\/\/github\.com\/openssl\/openssl\/pull\//
	|| /^Reviewed-by:\s*(\S.*\S)\s*$/) {
        next if $rmrev == 1;
        $have_rev = 1;
        # Skip if reviewer already in list
        next if $1 && grep { $1 eq $_ } @reviewers;
    }
    print;
    $last_line_blank = ($_ =~ /^\s*$/);
}
if ($rmrev == 0) {
    #Add a blank line unless the last one is already blank or a review line
    print "\n" unless $last_line_blank || $have_rev;
    foreach(@reviewers) {
	print "Reviewed-by: $_\n";
    }
    if ($trivial) {
        print "CLA: trivial\n";
    }
}

print "(Merged from https://github.com/openssl/openssl/pull/$prnum)\n"
    if $prnum;

my $email = $ENV{GIT_AUTHOR_EMAIL};

if (!$trivial && !$query->has_cla(lc $email)) {
    warn "\n\nWARNING: No CLA found for $email\n";
}
