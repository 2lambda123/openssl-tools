#! /bin/bash

here=$(cd $(dirname $0); pwd)
rcd=$here/.run-checker-data

SKIP_OPTS=()
ONLY_OPTS=()
if [ -f $rcd/new/hook-config ]; then
    . $rcd/new/hook-config
fi

rcd=$here/.run-checker-data
builddir="$1"; shift
opt="$1"; shift

if [ ${#SKIP_OPTS[@]} -gt 0 ]; then
    for x in "${SKIP_OPTS[@]}"; do
        if [ "$opt" == "$x" ]; then
	    echo "Skipping building with $opt (because in SKIP_OPTS)"
            exit 1
        fi
    done
fi

if [ ${#ONLY_OPTS[@]} -gt 0 ]; then
    bail_out=/bin/true
    for x in "${ONLY_OPTS[@]}"; do
        if [ "$opt" == "$x" ]; then
            bail_out=/bin/false
        fi
    done
    if $bail_out; then
	echo "Skipping building with $opt (because not in ONLY_OPTS)"
        exit 1
    fi
fi

optdir="$rcd/builds/$builddir"
curoptdir="$optdir/cur"
newoptdir="$optdir/new"

mkdir -p "$optdir"
if (
    set -e

    mkdir "$newoptdir"

    echo "$@" > "$newoptdir/options"
    cp $rcd/new/head "$newoptdir/head"
    newhead=$(cat "$newoptdir/head")

    # The expression in each condition branch will leave behind an exit code
    # that is returned back to the calling process
    if [ -f $rcd/new/rc-force-build ]; then
        (
            cd openssl
            git log --pretty=oneline --abbrev-commit ${newhead}^..${newhead}
        ) > "$newoptdir/log"
    elif [ ! -d "$curoptdir" ]; then
        # This is an entirely new build
        (
            cd openssl
            git log --pretty=oneline --abbrev-commit ${newhead}~20..${newhead}
            echo ...
        ) > "$newoptdir/log"
    else
        curhead=$(cat "$curoptdir/head")
        (
            cd openssl
            git log --pretty=oneline --abbrev-commit ${curhead}..${newhead}
        ) > "$newoptdir/log" && [ -n "$(cat "$newoptdir/log")" ]
    fi
); then
    exit 0
fi

# Something went wrong, or there is nothing to do.  Clear away $newoptdir so
# it doesn't stop a later run
rm -rf "$newoptdir"
exit 1

